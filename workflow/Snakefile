import sys
import os
import pandas
import numpy

configfile: "config/config.yaml"
pepfile: "schemas/project_config.yaml"

database = config["database"]
outdir = config["outdir"]
threshold = config["threshold"]
blacklisting = config["blacklisting"]
debug = config["debug"]

sample_sheet = pep.sample_table

sample_grouped = sample_sheet.groupby("type")
reads_sheet = sample_grouped.get_group("Reads")
assembly_sheet = sample_grouped.get_group("Assembly")


rule all:
  input:
    serovar = "%s/serovar.tsv" %outdir


rule link_reads:
  output:
    sample_dir =  temp(directory(expand("%s/{sample}" %outdir, sample = reads_sheet["sample_name"].values.tolist()))),
    link1 = expand("%s/{sample}/{sample}_R1.fastq.gz" %outdir, sample = reads_sheet["sample_name"].values.tolist()),
    link2 = expand("%s/{sample}/{sample}_R2.fastq.gz" %outdir, sample = reads_sheet["sample_name"].values.tolist())
  log:
    "%s/logs/link_reads.log" %outdir
  run:
    # Extract all read files
    reads = reads_sheet["file"].values.tolist()
    
    # Ensure sample sheet sizes fits
    if len(output.link1) == len(output.link2) & len(reads) == len(output.link1):

      # Iterate through all sample sheet rows
      for idx in range(len(output.link1)):

        # Make output directory
        os.makedirs(output.sample_dir[idx], exist_ok=True)

        # Define read mates
        read_pair = reads[idx]
        mate1 = os.path.realpath(read_pair[0])
        mate2 = os.path.realpath(read_pair[1])

        # Define link locations
        link1 = os.path.realpath(output.link1[idx])
        link2 = os.path.realpath(output.link2[idx])

        # Generate links
        os.symlink(src = mate1, dst = link1)
        os.symlink(src = mate2, dst = link2)

rule link_assemblies:
  output:
    sample_dir = temp(directory(expand("%s/{sample}" %outdir, sample = assembly_sheet["sample_name"].values.tolist()))),
    link = expand("%s/{sample}/{sample}.fasta" %outdir, sample = assembly_sheet["sample_name"].values.tolist())
  log: "%s/logs/link_assemblies.log" %outdir
  run:
    # Extract all assembly files
    assemblies = assembly_sheet["file"].values.tolist()

    # Ensure sample sheet sizes fits
    if len(output.link) == len(assemblies):
     
      # Iterate through all sample sheet rows
      for idx in range(len(output.link)):

        # Make output directory
        os.makedirs(output.sample_dir[idx], exist_ok=True)
        
        # Define assembly
        assembly = os.path.realpath(assemblies[idx][0])

        # Define link location
        link = os.path.realpath(output.link[idx])
 
        # Generate link
        os.symlink(src = assembly, dst = link)

include: "rules/detect_serovars.smk"
include: "rules/summarise_serovars.smk"

